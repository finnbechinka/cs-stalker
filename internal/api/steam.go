package api

import (
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"os"
	"strings"
)

type Summary struct {
	Steam64id string
	Avatar string
	Name string
	IsPublic bool
}

func ResolveUrl(url string) (string, error) {
	url = strings.TrimSpace(url)
	url = strings.TrimSuffix(url, "/")
	splitUrl := strings.Split(url, "/")
	vanityurl := splitUrl[len(splitUrl)-1]

	if len(splitUrl) < 3 {
		return resolveVanityUrl(vanityurl)
	}

	// TODO: CHECK FOR STEAMID64

	if splitUrl[len(splitUrl)-2] == "id" {
		return resolveVanityUrl(vanityurl)
	}

	if splitUrl[len(splitUrl)-2] == "profiles" {
		return vanityurl, nil
	}

	return "", fmt.Errorf("ResolveUrl: unable to parse url")
}

func resolveVanityUrl(vanityUrl string) (string, error) {
	// https://partner.steamgames.com/doc/webapi/ISteamUser#ResolveVanityURL
	requestUrl := fmt.Sprintf("https://api.steampowered.com/ISteamUser/ResolveVanityURL/v1/?key=%s&vanityurl=%s", os.Getenv("STEAMAPIKEY"), vanityUrl)
	resp, err := http.Get(requestUrl)
	if err != nil {
		return "", fmt.Errorf("ResolveVanityUrl: %w", err)
	}

	defer resp.Body.Close()

	bodyBytes, _ := io.ReadAll(resp.Body)

	var parsed struct {
		Response struct {
			Steam64id string `json:"steamid"`
			Success   int    `json:"success"`
			Message   string `json:"message"`
		} `json:"response"`
	}

	err = json.Unmarshal(bodyBytes, &parsed)
	if err != nil {
		return "", fmt.Errorf("ResolveVanityUrl: %w", err)
	}

	if parsed.Response.Success != 1 {
		return "", fmt.Errorf("ResolveVanityUrl: unable to resolve vanity url")
	}

	return parsed.Response.Steam64id, nil
}

func UserSummary(steam64id string) (Summary, error) {
	// https://partner.steamgames.com/doc/webapi/ISteamUser#GetPlayerSummaries
	// https://transform.tools/json-to-go https://mholt.github.io/json-to-go/
	var autoGenerated struct {
		Response struct {
			Players []struct {
				Steamid                  string `json:"steamid"`
				Communityvisibilitystate int    `json:"communityvisibilitystate"`
				Profilestate             int    `json:"profilestate"`
				Personaname              string `json:"personaname"`
				Lastlogoff               int    `json:"lastlogoff"`
				Profileurl               string `json:"profileurl"`
				Avatar                   string `json:"avatar"`
				Avatarmedium             string `json:"avatarmedium"`
				Avatarfull               string `json:"avatarfull"`
			} `json:"players"`
		} `json:"response"`
	}

	requestUrl := fmt.Sprintf("https://api.steampowered.com/ISteamUser/GetPlayerSummaries/v2/?key=%s&steamids=%s", os.Getenv("STEAMAPIKEY"), steam64id)

	resp, err := http.Get(requestUrl)
	if err != nil {
		return Summary{}, fmt.Errorf("UserSummary: %w", err)
	}

	defer resp.Body.Close()

	bodyBytes, _ := io.ReadAll(resp.Body)

	err = json.Unmarshal(bodyBytes, &autoGenerated)
	if err != nil {
		return Summary{}, fmt.Errorf("UserSummary: %w", err)
	}

	if len(autoGenerated.Response.Players) == 0 {
		return Summary{}, fmt.Errorf("UserSummary: No user summary was found")
	}
	
	summary := Summary{
		Steam64id: autoGenerated.Response.Players[0].Steamid,
		Avatar: autoGenerated.Response.Players[0].Avatarfull,
		Name: autoGenerated.Response.Players[0].Personaname,
		IsPublic: autoGenerated.Response.Players[0].Communityvisibilitystate == 3,
	}

	return summary, nil
}
